# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types companies_panel
{
	type companies_panel = default_block_window {
		name = "companies_panel"
		
		#blockoverride "animation_state_block" {
		#	state = {
		#		name = _show
		#		start_sound = {
		#			soundeffect = "event:/SFX/UI/SideBar/companies"
		#		}
		#	}
		#
		#	state = {
		#		name = _hide
		#		start_sound = {
		#			soundeffect = "event:/SFX/UI/SideBar/companies_stop"
		#		}
		#	}
		#}

		blockoverride "entire_back_button" {
			back_button_large = {
				position = { 8 30 }
				onclick = "[GetVariableSystem.Toggle('hide_current_companies')]"
				visible = "[GetVariableSystem.Exists('hide_current_companies')]"
				input_action = "back"
			}

			back_button_large = {
				position = { 8 30 }
				onclick = "[InformationPanelBar.OpenPreviousPanel]"
				visible = "[Not(GetVariableSystem.Exists('hide_current_companies'))]"
				input_action = "back"
			}
		}
		
		blockoverride "window_header_name"
		{
			text = "COMPANIES"
		}
		
		blockoverride "scrollarea_content"
		{
			flowcontainer = {
				using = default_list_position
				direction = vertical
				minimumsize = { @panel_width_plus_14 -1 }
				maximumsize = { @panel_width_plus_14 -1 }
				datacontext = "[AccessPlayer]"

				flowcontainer = {
					visible = "[Not(GetVariableSystem.Exists('hide_current_companies'))]"
					parentanchor = hcenter
					direction = vertical
					default_header_2texts = {
						blockoverride "text1" {
							text = "ESTABLISHED_COMPANIES"
						}
						blockoverride "text2" {
							text = "COMPANIES_AMOUNT_HEADER"
						}
					}

					flowcontainer = {
						direction = vertical
						parentanchor = hcenter
						margin = { 0 10 }
						spacing = 10

						### COMPANIES
						flowcontainer = {
							parentanchor = hcenter
							visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessCompanies))]"
							minimumsize = { @panel_width -1 }
							maximumsize = { @panel_width -1 }
							datamodel = "[AccessPlayer.AccessCompanies]"
							direction = vertical
							spacing = 10

							item = {
								company_item = {}
							}
						}

						flowcontainer = {
							parentanchor = hcenter
							visible = "[GreaterThan_int32(AccessPlayer.GetNumAvailableCompanies, '(int32)0')]"
							minimumsize = { @panel_width -1 }
							maximumsize = { @panel_width -1 }
							datamodel = "[DataModelRepeatedItem(AccessPlayer.GetNumAvailableCompanies)]"
							direction = vertical
							spacing = 10

							item = {
								button_icon_plus_square = {
									size = { @panel_width 100 }
									onclick = "[GetVariableSystem.Toggle('hide_current_companies')]"
									onclick = "[GetVariableSystem.Clear('available_companies')]"
									onclick = "[ScrollPanelToTop('companies_panel')]"
									
									blockoverride "icon_size" {
										size = { 80 80 }
									}
								}
							}
						}
					}

					default_header = {
						blockoverride "text" {
							text = "BONUS_FOR_ESTABLISHED_COMPANIES"
						}
					}	

					flowcontainer = {
						direction = vertical
						margin_top = 10
						margin_bottom = 20
						textbox = {				
							text = "COMPANY_THROUGHPUT_BONUS_HEADER"
							using = fontsize_xl
							using = companies_header_texts
						}


						textbox = {				
							text = "COMPANY_CONSTRUCTION_BONUS_HEADER"
							using = fontsize_xl
							using = companies_header_texts
						}
					}
				}

				### sort buttons
				widget = {
					size = { @panel_width_plus_14 30 }
					
					hbox = {

						sort_button = {
							layoutpolicy_horizontal = expanding
							size = { 0 30 }
							onclick = "[AccessPlayer.SortCompanies('name')]"
							
							text = "NAME"
						}

						sort_button = {
							layoutpolicy_horizontal = expanding
							size = { 0 30 }
							onclick = "[AccessPlayer.SortCompanies('productivity')]"
							
							text = "concept_productivity"
						}

						sort_button = {
							layoutpolicy_horizontal = expanding
							size = { 0 30 }
							onclick = "[AccessPlayer.SortCompanies('levels')]"
							
							text = "concept_building_levels"
						}
					}
				}
				
				section_header_button = {
					visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessAvailableCompanies))]"
						
					blockoverride "left_text" {
						text = "AVAILABLE_COMPANIES"
					}

					blockoverride "right_text" {
						section_header_right_text = {
							text = "[GetDataModelSize(AccessPlayer.AccessAvailableCompanies)]"
						}
					}

					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle('available_companies')]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[GetVariableSystem.Exists('available_companies')]"
					}

					blockoverride "onclick_showless" {
						visible = "[Not(GetVariableSystem.Exists('available_companies'))]"
					}
				}

				### AVAILABLE COMPANIES
				flowcontainer = {
					parentanchor = hcenter
					direction = vertical
					visible = "[Not(GetVariableSystem.Exists('available_companies'))]"

					flowcontainer = {
						parentanchor = hcenter
						visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessAvailableCompanies))]"
						datamodel = "[AccessPlayer.AccessAvailableCompanies]"
						direction = vertical
						spacing = 5

						item = {
							potential_company_item = {}
						}
					}
				}

				section_header_button = {
					blockoverride "left_text" {
						text = "POTENTIAL_COMPANIES"
					}

					blockoverride "right_text" {
						section_header_right_text = {
							text = "[GetDataModelSize(AccessPlayer.AccessPotentialCompanies)]"
						}
					}
					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle('potential_companies')]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[Not(GetVariableSystem.Exists('potential_companies'))]"
					}

					blockoverride "onclick_showless" {
						visible = "[GetVariableSystem.Exists('potential_companies')]"
					}
				}

				### UNAVAILABLE COMPANIES
				flowcontainer = {
					parentanchor = hcenter
					direction = vertical
					visible = "[GetVariableSystem.Exists('potential_companies')]"

					flowcontainer = {
						parentanchor = hcenter
						visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessPotentialCompanies))]"
						datamodel = "[AccessPlayer.AccessPotentialCompanies]"
						direction = vertical
						spacing = 5

						item = {
							potential_company_item = {}
						}
					}
				}		

				# UNAVAILABLE COMPANIES
				section_header_button = {
					blockoverride "left_text" {
						text = "UNAVAILABLE_COMPANIES"
					}

					blockoverride "right_text" {
						section_header_right_text = {
							text = "[GetDataModelSize(AccessPlayer.AccessUnavailableCompanies)]"
						}
					}
					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle('unavailable_companies')]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[Not(GetVariableSystem.Exists('unavailable_companies'))]"
					}

					blockoverride "onclick_showless" {
						visible = "[GetVariableSystem.Exists('unavailable_companies')]"
					}
				}

				### POTENTIAL COMPANIES
				flowcontainer = {
					parentanchor = hcenter
					direction = vertical
					visible = "[GetVariableSystem.Exists('unavailable_companies')]"

					flowcontainer = {
						parentanchor = hcenter
						visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessUnavailableCompanies))]"
						datamodel = "[AccessPlayer.AccessUnavailableCompanies]"
						direction = vertical
						spacing = 5

						item = {
							potential_company_item = {}
						}
					}
				}			
			}
		}
	}

	type company_item = container {
		button_icon_pin = {
			size = { 30 30 }
			visible = "[Company.IsPinnedInOutliner]"
			onclick = "[Company.TogglePinInOutliner]"
			tooltip = "UNPIN_COMPANY"
			position = { 5 5 }
		}
		button_icon_unpin = {
			size = { 30 30 }
			visible = "[Not(Company.IsPinnedInOutliner)]"
			onclick = "[Company.TogglePinInOutliner]"
			tooltip = "PIN_COMPANY"
			position = { 5 5 }
		}

		flowcontainer = {
			minimumsize = { @panel_width -1 }		
			maximumsize = { @panel_width -1 }
			margin = { 10 10 }
			spacing = 20		
				
			background = {
				using = entry_bg_simple
			}

			tooltipwidget = {
				FancyTooltip_Company = {}
			}			
			
			flowcontainer = {
				direction = vertical
				parentanchor = vcenter
				spacing = 10
				icon = {
					size = { 130 130 }
					texture = "[Company.GetCompanyType.GetTexture]"
				}

				button = {
					using = default_button
					size = { 130 40 }
					text = "DISBAND_COMPANY"
					onclick = "[Execute(GetPlayer.RemoveCompany(Company.GetCompanyType))]"
					enabled = "[IsValid(GetPlayer.RemoveCompany(Company.GetCompanyType))]"
					tooltip = "[GetPlayer.GetRemoveCompanyDesc(Company.GetCompanyType)]"
				}
			}

			flowcontainer = {
				direction = vertical
				margin = { 10 10 }
				parentanchor = vcenter
				minimumsize = { 370 -1 }
				maximumsize = { 370 -1 }
				margin_left = 20
				
				background = {
					using = simple_frame
				}

				textbox = {
					text = "[Company.GetName]"
					default_format = "#header"
					using = fontsize_large
					using = company_item_text
					margin_bottom = 5
				}		
			
				flowcontainer = {
					direction = horizontal
					spacing = 5							
					datamodel = "[Company.AccessCompanyType.AccessBuildingTypes]"
					
					item = {
						company_building_item = {}
					}
				}	

				textbox = {				
					text = "COMPANY_PRODUCTIVITY"
					using = company_item_text
					margin_bottom = 5
					margin_top = 5
				}	

				widget = {			
					size = { 330 34 }
					tooltip = "COMPANY_PROSPERITY_TOOLTIP"
					
					changed_value_increased_progressbar_horizontal = {
						size = { 100% 100% }
						visible = "[And(GreaterThan_CFixedPoint(Company.CalcProsperityChange,'(CFixedPoint)0'), LessThan_CFixedPoint(Company.GetProsperity, GetDefine('NEconomy', 'COMPANY_PROSPERITY_MAX')))]"
						blockoverride "values" {
							min = 0
							max = "[GetDefine('NEconomy','COMPANY_PROSPERITY_MAX')]"
							value = "[Company.GetProsperity]"
						}
						blockoverride "animate_negative_change" {
							animate_negative_changes = no
						}
						blockoverride "arrow_texture_density" {
							texture_density = 4 #use to match height of progressbar
						}
					}

					changed_value_decreased_progressbar_horizontal = {
						size = { 100% 100% }
						visible = "[And(LessThan_CFixedPoint(Company.CalcProsperityChange,'(CFixedPoint)0'), LessThan_CFixedPoint(Company.GetProsperity, GetDefine('NEconomy', 'COMPANY_PROSPERITY_MAX')))]"

						blockoverride "values" {
							min = 0
							max = "[GetDefine('NEconomy','COMPANY_PROSPERITY_MAX')]"
							value = "[Company.GetProsperity]"
						}
						blockoverride "arrow_texture_density" {
							texture_density = 4 #use to match height of progressbar
						}
					}

					default_progressbar_horizontal = {
						size = { 100% 100% }
						visible = "[Or(EqualTo_CFixedPoint(Company.CalcProsperityChange,'(CFixedPoint)0'), GreaterThanOrEqualTo_CFixedPoint(Company.GetProsperity, GetDefine('NEconomy', 'COMPANY_PROSPERITY_MAX')))]"

						blockoverride "values" {
							min = 0
							max = "[GetDefine('NEconomy','COMPANY_PROSPERITY_MAX')]"
							value = "[Company.GetProsperity]"
						}
					}

					textbox = {				
						text = "COMPANY_PROSPERITY"
						using = company_item_text
						parentanchor = vcenter
						margin_left = 10
					}
				}

				widget = { size = { 10 10 } }			
				
				textbox = {
					text = "COMPANY_PROSPERITY_MODIFIER_HEADER"
					using = company_item_text
				}			
				
				textbox = {
					text = "COMPANY_PROSPERITY_MODIFIER"
					alpha = "[TransparentIfFalse(Company.ProvidesProsperityBonus)]"
					using = company_item_text
				}	
			}
		}		

	}
	
	type potential_company_item = flowcontainer {
		minimumsize = { @panel_width -1 }		
		maximumsize = { @panel_width -1 }
		margin = { 10 10 }
		spacing = 20		
			
		background = {
			using = entry_bg_simple
		}

		tooltipwidget = {
			FancyTooltip_CompanyType = {
				datacontext = "[GetPlayer]"
			}
		}			
		
		flowcontainer = {
			direction = vertical
			parentanchor = vcenter
			spacing = 10
			icon = {
				size = { 130 130 }
				texture = "[CompanyType.GetTexture]"
			}

			button = {
				using = default_button
				size = { 130 40 }
				text = "ESTABLISH_COMPANY"
				onclick = "[Execute(GetPlayer.CreateCompany(CompanyType.Self))]"
				onclick = "[GetVariableSystem.Clear('hide_current_companies')]"
				onclick = "[ScrollPanelToTop('companies_panel')]"
				enabled = "[IsValid(GetPlayer.CreateCompany(CompanyType.Self))]"
				tooltip = "[GetPlayer.GetCreateCompanyDesc(CompanyType.Self)]"	
			}
		}

		flowcontainer = {
			direction = vertical
			margin = { 10 10 }
			parentanchor = vcenter
			minimumsize = { 370 -1 }
			maximumsize = { 370 -1 }
			margin_left = 20
			
			background = {
				using = simple_frame
			}

			textbox = {
				text = "[CompanyType.GetName]"
				default_format = "#header"
				using = fontsize_large
				using = company_item_text
				margin_bottom = 5

			}		
		
			flowcontainer = {
				direction = horizontal
				spacing = 5							
				datamodel = "[CompanyType.AccessBuildingTypes]"
				
				item = {
					company_building_item = {}
				}
			}	
			
			#textbox = {				
			#	text = "COMPANY_TYPE_NUM_BUILDING_LEVELS"
			#	using = company_item_text
			#}	

			textbox = {				
				text = "COMPANY_TYPE_PRODUCTIVITY"
				tooltip = "COMPANY_TYPE_PRODUCTIVITY_TOOLTIP"
				using = company_item_text
				margin_top = 5
			}	

			widget = { size = { 5 5 } }

			textbox = {
				text = "COMPANY_PROSPERITY_MODIFIER_HEADER"
				using = company_item_text
			}			
			
			textbox = {
				text = "COMPANY_TYPE_PROSPERITY_MODIFIER"
				using = company_item_text
			}	
		}
	}


	type company_building_item = button {
		texture = "[BuildingType.GetTexture]"
		onrightclick = "[RightClickMenuManager.ShowForBuildingType(BuildingType.AccessSelf)]"
		effectname = "NoHighlight"
		distribute_visual_state = no
		inherit_visual_state = no
		alpha = "[TransparentIfZero_int32(BuildingType.GetLevelCountInCountry(GetPlayer.Self))]"

		size = { 50 50 }

		textbox = {
			text = "BUILDING_TYPE_COUNT"
			autoresize = yes
			position = { 5 -2 }
			parentanchor = bottom
			align = right|nobaseline
			visible = "[NotEqualTo_int32( BuildingType.GetLevelCountInCountry(GetPlayer.Self), '(int32)0')]"
		}

		tooltipwidget = {
			FancyTooltip_BuildingType = {}
		}
	}		
}

template company_item_text {
	align = nobaseline
	autoresize = yes
	maximumsize = { 350 -1 }
	multiline = yes
}

template companies_header_texts {
	minimumsize = { @panel_width_plus_14 -1 }
	maximumsize = { @panel_width_plus_14 -1 }
	autoresize = yes
	multiline = yes
	align = hcenter|nobaseline
	parentanchor = hcenter
}